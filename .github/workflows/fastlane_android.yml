name: Fastlane Android
on:
  workflow_call:
    inputs:
      instance:
        type: string
        required: false
      instance_url:
        type: string
        required: false
        default: ""
      app_name:
        type: string
        required: false
        default: "CoopCycle"
      primary_color:
        type: string
        required: false
        default: ""
      package_name:
        type: string
        required: false
        default: "fr.coopcycle"
      keystore_key_alias:
        type: string
        required: false
        default: "coopcycle"
      keystore_key_password_secret:
        type: string
        required: false
        default: "SIGNING_KEY_PASSWORD"
      google_play_track:
        type: string
        required: false
        default: "production"
      branch:
        type: string
        required: false
        default: "master"
jobs:
  FASTLANE:
    name: Release Android app with Fastlane
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
      - name: Find Metro cache
        id: metro-cache-dir-path
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const os = require('os');
            const path = require('path');
            return path.join(os.tmpdir(), 'metro-cache');
      - name: Restore Metro cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.metro-cache-dir-path.outputs.result }}
          key: ${{ runner.os }}-metro-cache-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-metro-cache-${{ github.base_ref }}
            ${{ runner.os }}-metro-cache-
      - name: Create .env file
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          GOOGLE_MAPS_BROWSER_KEY: ${{ secrets.GOOGLE_MAPS_BROWSER_KEY }}
          GOOGLE_MAPS_ANDROID_KEY: ${{ secrets.GOOGLE_MAPS_ANDROID_KEY }}
          TRANSISTORSOFT_LICENSE_KEY: ${{ secrets.TRANSISTORSOFT_LICENSE_KEY }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          GOOGLE_SIGN_IN_CLIENT_ID: ${{ secrets.GOOGLE_SIGN_IN_CLIENT_ID }}
          DEFAULT_SERVER: ${{ inputs.instance_url }}
          PRIMARY_COLOR: ${{ inputs.primary_color }}
          SMARTLOOK_PROJECT_KEY: ${{ secrets.SMARTLOOK_PROJECT_KEY }}
          FACEBOOK_CLIENT_TOKEN: ${{ secrets.FACEBOOK_CLIENT_TOKEN }}
        run: |
          touch .env
          echo COUNTLY_SERVER_URL= >> .env
          echo COUNTLY_APP_KEY= >> .env
          echo COUNTLY_SALT= >> .env
          echo SENTRY_DSN="$SENTRY_DSN" >> .env
          echo GOOGLE_MAPS_BROWSER_KEY="$GOOGLE_MAPS_BROWSER_KEY" >> .env
          echo GOOGLE_MAPS_ANDROID_KEY="$GOOGLE_MAPS_ANDROID_KEY" >> .env
          echo TRANSISTORSOFT_LICENSE_KEY="$TRANSISTORSOFT_LICENSE_KEY" >> .env
          echo FACEBOOK_APP_ID="$FACEBOOK_APP_ID" >> .env
          echo FACEBOOK_CLIENT_TOKEN="$FACEBOOK_CLIENT_TOKEN" >> .env
          echo GOOGLE_SIGN_IN_CLIENT_ID="$GOOGLE_SIGN_IN_CLIENT_ID" >> .env
          echo DEFAULT_SERVER="$DEFAULT_SERVER" >> .env
          echo PRIMARY_COLOR="$PRIMARY_COLOR" >> .env
          echo CHECKOUT_SEARCH_ENABLED="$CHECKOUT_SEARCH_ENABLED" >> .env
          echo SMARTLOOK_PROJECT_KEY="$SMARTLOOK_PROJECT_KEY" >> .env
      - name: Decode sentry.properties file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileDir: "./android/"
          fileName: "sentry.properties"
          encodedString: ${{ secrets.SENTRY_PROPERTIES_BASE64 }}
      - name: Decode Android keystore file
        uses: timheuer/base64-to-file@v1.2
        id: android_keystore
        with:
          fileName: "android_keystore.kjs"
          encodedString: ${{ secrets.SIGNING_STORE_FILE_BASE64 }}
      - name: Decode google-services.json file
        uses: timheuer/base64-to-file@v1.2
        with:
          fileDir: "./android/app/"
          fileName: "google-services.json"
          encodedString: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
      - name: Decode play-store-credentials.json file
        uses: timheuer/base64-to-file@v1.2
        id: android_play_store_credentials
        with:
          fileName: "play-store-credentials.json"
          encodedString: ${{ secrets.GOOGLE_JSON_KEY_FILE_BASE64 }}
      - name: Install RubyGems
        working-directory: android/
        run: bundle install
      - run: yarn install
      - name: Run Fastlane
        working-directory: android/
        run: bundle exec fastlane deploy
        env:
          ANDROID_STORE_FILE: ${{ steps.android_keystore.outputs.filePath }}
          ANDROID_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ inputs.keystore_key_alias }}
          ANDROID_KEY_PASSWORD: ${{ secrets[inputs.keystore_key_password_secret] }}
          ANDROID_JSON_KEY_FILE: ${{ steps.android_play_store_credentials.outputs.filePath }}
          APPICON_IMAGE_FILE: "fastlane/metadata-${{ inputs.instance }}/app_icon.png"
          SUPPLY_PACKAGE_NAME: ${{ inputs.package_name }}
          SUPPLY_TRACK: ${{ inputs.google_play_track }}
          COOPCYCLE_APP_NAME: ${{ inputs.app_name }}
      - name: Move build
        run: mv android/app/build/outputs/bundle/**/*.aab release.aab
      - name: Upload aab artifact
        if: '!cancelled()'
        uses: actions/upload-artifact@v3
        with:
          name: release.aab
          path: release.aab
  AAB_TO_APK:
    name: Convert aab to apk
    if: '!cancelled()'
    needs: FASTLANE
    runs-on: ubuntu-latest
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: release.aab
      - name: Convert aab to apk
        id: convert_aab
        uses: mukeshsolanki/bundletool-action@v1.0.0
        with:
          aabFile: release.aab
          base64Keystore: ${{ secrets.SIGNING_STORE_FILE_BASE64 }}
          keystorePassword: ${{ secrets.SIGNING_STORE_PASSWORD }}
          keystoreAlias: ${{ inputs.keystore_key_alias }}
          keyPassword: ${{ secrets[inputs.keystore_key_password_secret] }}
      - uses: actions/upload-artifact@v3
        with:
          name: release.apk
          path: ${{ steps.convert_aab.outputs.apkPath }}
  SCREENSHOTS:
    name: Capture screenshots
    if: '!cancelled()'
    needs: AAB_TO_APK
    runs-on: macOS-latest
    strategy:
      matrix:
        EMULATOR_API: [28, 33]
        EMULATOR_ARCH: [x86_64]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: Download apk artifact
        uses: actions/download-artifact@v3
        with:
          name: release.apk
      - name: Install Maestro CLI
        run: |
            curl -Ls "https://get.maestro.mobile.dev" | bash
            export PATH="$PATH":"$HOME/.maestro/bin"
      - name: Execute emulator tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.EMULATOR_API }}
          target: google_apis
          arch: ${{ matrix.EMULATOR_ARCH }}
          profile: Nexus 6
          # https://github.com/wix/Detox/blob/master/docs/Introduction.AndroidEmulatorsBestPractices.md#booting-an-emulator-via-command-line
          emulator-options: -verbose -no-window -no-snapshot -noaudio -no-boot-anim -gpu swiftshader_indirect -camera-back emulated -camera-front emulated
          disable-animations: true
          script: |
            bash -c "echo 'hw.lcd.height=2560' >> /Users/runner/.android/avd/test.avd/config.ini"
            bash -c "echo 'hw.lcd.width=1440' >> /Users/runner/.android/avd/test.avd/config.ini"
            curl -Ls "https://get.maestro.mobile.dev" | bash
            adb root
            adb install -t release.apk
            adb shell settings put global sysui_demo_allowed 1
            adb shell am broadcast -a com.android.systemui.demo -e command clock -e hhmm 1200
            adb shell am broadcast -a com.android.systemui.demo -e command network -e mobile show -e level 4 -e datatype 4g -e wifi false
            adb shell am broadcast -a com.android.systemui.demo -e command notifications -e visible false
            adb shell am broadcast -a com.android.systemui.demo -e command battery -e plugged false -e level 100
            $HOME/.maestro/bin/maestro test -e APP_ID=${{ inputs.package_name }} --include-tags=screenshots ./__maestro__
      - name: Upload to S3 bucket
        uses: Noelware/s3-action@2.2.1
        with:
          files: '*.png'
          access-key-id: ${{ secrets.AWS_KEY_ID }}
          path-format: '/$(tag)'
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          endpoint: https://s3.fr-par.scw.cloud
          prefix: /screenshots/${{ inputs.app_name }}/android-${{ matrix.EMULATOR_ARCH }}
          region: fr-par
          bucket: coopcycle-ci
      - uses: actions/upload-artifact@v3
        if: 'failure()'
        with:
          name: maestro-error-rapport 
          path: ~/.maestro/tests/

