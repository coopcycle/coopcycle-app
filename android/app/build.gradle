apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

if (findProject(':react-native-background-geolocation') != null) {
  apply from: "${project(':react-native-background-geolocation').projectDir}/app.gradle"
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions "default"

    namespace "fr.coopcycle"
    defaultConfig {
        applicationId "fr.coopcycle"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        multiDexEnabled true
        versionCode 205
        versionName "2.17.1"

        manifestPlaceholders = [
            tipsiStripeRedirectScheme: "coopcycle",
            googleMapsApiKey: project.env.get("GOOGLE_MAPS_ANDROID_KEY"),
            transistorsoftLicenseKey: project.env.get("TRANSISTORSOFT_LICENSE_KEY")
        ]

        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // https://github.com/luggit/react-native-config#advanced-android-setup
        resValue "string", "build_config_package", "fr.coopcycle"
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    signingConfigs {
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            if (project.hasProperty('COOPCYCLE_RELEASE_STORE_FILE')) {
                storeFile file(COOPCYCLE_RELEASE_STORE_FILE)
                storePassword COOPCYCLE_RELEASE_STORE_PASSWORD
                keyAlias COOPCYCLE_RELEASE_KEY_ALIAS
                keyPassword COOPCYCLE_RELEASE_KEY_PASSWORD
            }
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            if (System.getProperty('minifyEnabled', 'yes') == 'yes') {
                minifyEnabled enableProguardInReleaseBuilds
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            if (findProject(':react-native-background-geolocation') != null) {
              proguardFiles "${project(':react-native-background-geolocation').projectDir}/proguard-rules.pro"
            }
            if (System.getProperty('useDebugCertificate', 'no') == 'yes') {
                signingConfig signingConfigs.debug
            } else {
                signingConfig signingConfigs.release
            }
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
        }
    }
    productFlavors {
        instance {
            dimension "default"
        }
        official {
            dimension "default"
            isDefault true
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    androidTestImplementation('com.wix:detox:+')

    // This is needed to enable multidex on API Level < 21
    // https://developer.android.com/studio/build/multidex.html
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"

    // See https://github.com/coopcycle/coopcycle-app/commit/f3b037d36fd0a34e46e86164ea9f8be528172416
    implementation "com.google.android.gms:play-services-basement:$playServicesVersion"
    implementation "com.google.android.gms:play-services-base:$playServicesVersion"
}

allprojects {
    repositories {
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
