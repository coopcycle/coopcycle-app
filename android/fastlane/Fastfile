# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Build a new version for the Google Play"
  lane :build do

    # Not sure it's the best way to retrieve resolved config...
    # but Supply.config is not initialized here
    supply_config = FastlaneCore::Configuration.create(Supply::Options.available_options, {})

    default_package_name = CredentialsManager::AppfileConfig.try_fetch_value(:package_name)
    package_name = supply_config[:package_name]

    gradle_task = "bundleOfficialRelease"
    artifact_filepath = "officialRelease/app-official-release"

    if package_name != default_package_name
      generate_icons
      rename_app
      gradle_task = "bundleInstanceRelease"
      artifact_filepath = "instanceRelease/app-instance-release"
    end

    begin
      previous_build_number = google_play_track_version_codes(
        track: "internal",
      )[0]
      current_build_number = previous_build_number + 1
      increment_version_code(
        version_code: current_build_number
      )
    rescue FastlaneCore::Interface::FastlaneError => e
      # Google Api Error: Invalid request - Package not found
      # This can happen when building the app for the first time
    end

    gradle(
      task: "clean #{gradle_task}",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_STORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }
    )
    # bundletool(
    #   ks_path: ENV["ANDROID_STORE_FILE"],
    #   ks_password: ENV["ANDROID_STORE_PASSWORD"],
    #   ks_key_alias: ENV["ANDROID_KEY_ALIAS"],
    #   ks_key_alias_password: ENV["ANDROID_KEY_PASSWORD"],
    #   aab_path: "app/build/outputs/bundle/#{artifact_filepath}.aab",
    #   apk_output_path: "app/build/outputs/apk/#{artifact_filepath}.apk",
    #   verbose: true
    # )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    build()
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Build a new Debug build"
  lane :debugBuild do
    gradle(task: "clean assembleDebug")
  end

  desc "Upload a previously built version to the Google Play"
  lane :upload do
    upload_to_play_store(
      skip_upload_apk: true,
      track_promote_to: "internal",
      aab: "app/build/outputs/bundle/release/app-release.aab",
    )
  end

  desc "Generate icons"
  lane :generate_icons do
    android_appicon(
      # Should be passed via env var APPICON_IMAGE_FILE
      # appicon_image_file: 'fastlane/metadata-naofood/app_icon.png',
      appicon_icon_types: [:launcher],
      appicon_path: 'app/src/main/res/mipmap',
      generate_rounded: true
    )
    # TODO Create the base image..!
    # android_appicon(
    #   appicon_image_file: 'app/src/main/res/drawable/ic_default_notification.png',
    #   appicon_image_file: 'app/src/main/res/drawable-xxxhdpi/ic_default_notification.png',
    #   appicon_icon_types: [:notification],
    #   appicon_path: 'app/src/main/res/drawable',
    #   appicon_filename: 'ic_default_notification'
    #   appicon_filename: 'ic_notification'
    #   generate_rounded: true
    # )
  end

  desc "Rename app"
  lane :rename_app do

    if not ENV.has_key?("COOPCYCLE_APP_NAME")
      puts "No custom app name, skipping. You should define the COOPCYCLE_APP_NAME env var."
      next
    end

    # Not sure it's the best way to retrieve resolved config...
    # but Supply.config is not initialized here
    supply_config = FastlaneCore::Configuration.create(Supply::Options.available_options, {})

    app_name = ENV["COOPCYCLE_APP_NAME"]
    package_name = supply_config[:package_name]

    # Change applicationId in android/app/build.gradle
    gradle_file_path = File.realpath('./../app/build.gradle')
    text = File.read(gradle_file_path)
    new_contents = text.gsub(/applicationId "fr.coopcycle"/, "applicationId \"#{package_name}\"")
    File.open(gradle_file_path, "w") { |file| file << new_contents }

    # Change app_name in android/app/src/main/res/values/strings.xml
    android_change_string_app_name(newName: app_name)
  end

  desc "Upload metadata to Google Play"
  lane :upload_metadata do
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: false,
      skip_upload_changelogs: true,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
  end

end
