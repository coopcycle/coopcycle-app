# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(
      task: "clean bundleRelease",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_STORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }
    )
    bundletool(
      ks_path: ENV["ANDROID_STORE_FILE"],
      ks_password: ENV["ANDROID_STORE_PASSWORD"],
      ks_key_alias: ENV["ANDROID_KEY_ALIAS"],
      ks_key_alias_password: ENV["ANDROID_KEY_PASSWORD"],
      aab_path: "app/build/outputs/bundle/release/app-release.aab",
      apk_output_path: "app/build/outputs/apk/release/app-release.apk",
      verbose: true
    )
    upload_to_play_store(
      skip_upload_apk: true,
    )
  end

  desc "Build a new Debug build"
  lane :debugBuild do
    gradle(task: "clean assembleDebug")
  end

  desc "Upload a previously built version to the Google Play"
  lane :upload do
    upload_to_play_store(
      skip_upload_apk: true,
      track_promote_to: "internal",
      aab: "app/build/outputs/bundle/release/app-release.aab",
    )
  end

  desc "Generate icons"
  lane :generate_icons do
    android_appicon(
      # Should be passed via env var APPICON_IMAGE_FILE
      # appicon_image_file: 'fastlane/metadata-naofood/app_icon.png',
      appicon_icon_types: [:launcher],
      appicon_path: 'app/src/main/res/mipmap',
      generate_rounded: true
    )
  end

  desc "Deploy a new version of Naofood to the Google Play Internal test"
  lane :deployNaofoodInternal do

    previous_build_number = google_play_track_version_codes(
      track: "internal",
    )[0]
    current_build_number = previous_build_number + 1
    increment_version_code(
      version_code: current_build_number
    )

    gradle(
      task: "clean bundleClientRelease",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_STORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_STORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
      }
    )
    bundletool(
      ks_path: ENV["ANDROID_STORE_FILE"],
      ks_password: ENV["ANDROID_STORE_PASSWORD"],
      ks_key_alias: ENV["ANDROID_KEY_ALIAS"],
      ks_key_alias_password: ENV["ANDROID_KEY_PASSWORD"],
      aab_path: "app/build/outputs/bundle/clientRelease/app-client-release.aab",
      apk_output_path: "app/build/outputs/apk/clientRelease/app-client-release.apk",
      verbose: true
    )
    upload_to_play_store(
      skip_upload_apk: true,
      skip_upload_metadata: true,
      track: "internal",
    )
  end

end

